import scala.annotation.tailrec

/*
Exercise 1.9: Each of the following two procedures defines
a method for adding two positive integers in terms of the
procedures inc, which increments its argument by 1, and
dec, which decrements its argument by 1.
(define (+ a b)
(if (= a 0) b (inc (+ (dec a) b))))
(define (+ a b)
(if (= a 0) b (+ (dec a) (inc b))))
Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these
processes iterative or recursive?
 */

def ++(n:Int) = n+1
def --(n:Int) = n-1

def addRec(a: Int, b: Int): Int =
  if(a == 0) b else ++ (addRec(--(a) , b))

/*
addRec(4,9)
++(addRec(--(4), 9))
++(addRec(3, 9))
++(++(addRec(--(3), 9)))
++(++(addRec(2, 9)))
++(++(++(addRec(--(2), 9))))
++(++(++(addRec(1, 9))))
++(++(++(++(addRec(--(1), 9)))))
++(++(++(++(addRec(0, 9)))))
++(++(++(++(9))))
++(++(++(10)))
++(++(11))
++(12)
13
*/



@scala.annotation.tailrec
def addIter(a: Int, b: Int): Int =
  if(a == 0) b else addIter(--(a), ++(b))

/*
addIter(4,9)
addIter(--(4), ++(9))
addIter(3, 10)
addIter(--(3), ++(10))
addIter(2, 11)
addIter(--(2), ++(11))
addIter(1, 12)
addIter(--(1), ++(12))
addIter(0, 13)
13
 */


addRec(4, 9)
addIter(4, 9)



// ex 1.11
def ex1_11Rec(n: Int): Int = {
  if (n < 3) n
  else ex1_11Rec(n - 1) + 2 * ex1_11Rec(n - 2) + 3 * ex1_11Rec(n - 3)
}

def ex1_11Iter(n: Int) = {
  @tailrec def helper(a: Int, b: Int, c: Int, count: Int): Int = {
    if (count == 0) a
    else helper(b, c, 3 * a + 2 * b + c, count - 1)
  }
  helper(0, 1, 2, n)
}
